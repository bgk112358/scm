// 
// Create by kong
// Copyright 2025 China Automotive Research Software Evaluation Co., Ltd.
//
#include "gtest/gtest.h"
#include <cstring>
extern "C" {
#include "cyber_pki.h"
}

/*
 * Test vector
 * https://www.ietf.org/rfc/rfc3602.txt
 * https://www.ietf.org/rfc/rfc3686.txt
 */

TEST(Sm4Test, Sm4EcbEncTest) {
    // ENCRYPT
    void *hSymmKeyObj = nullptr;
    unsigned char pucKey[] = {
            0x6c, 0x3e, 0xa0, 0x47, 0x76, 0x30, 0xce, 0x21, 0xa2, 0xce,
            0x33, 0x4a, 0xa7, 0x46, 0xc2, 0xcd };
    unsigned int uiKeyLen = sizeof(pucKey);
    int rv = CY_CreateSymmKeyObj(
            &hSymmKeyObj,
            pucKey,
            uiKeyLen,
            nullptr,
            0,
            SGD_ENC,
            SGD_SM4_ECB);
    ASSERT_EQ(rv, 0);
    unsigned char pucInData[] = {
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
            0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13,
            0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d,
            0x1e, 0x1f };
    unsigned int uiInDataLen = sizeof(pucInData);

    unsigned char ucOutData[32 + 16] = {0};
    unsigned int uiOutDataLen = 32 + 16;

    unsigned char ucExpected[] = {
            0xd2, 0xec, 0x2f, 0x66, 0x55, 0x6e, 0x4c, 0x30, 0xa4, 0xf6,
            0xc0, 0x12, 0x7a, 0xa7, 0x6e, 0x69, 0x13, 0xc1, 0xc1, 0x35,
            0xa3, 0x15, 0xd5, 0xcb, 0x6a, 0xd6, 0xb7, 0x1e, 0x01, 0x8d,
            0xf0, 0x8b, 0xdf, 0x27, 0x12, 0x88, 0xfd, 0xb7, 0x2a, 0xd4,
            0xe9, 0xf1, 0x55, 0x52, 0xb3, 0x19, 0xf9, 0x44 };

    rv = CY_SymmEncryptUpdate(
            hSymmKeyObj,
            pucInData, uiInDataLen,
            ucOutData, &uiOutDataLen);
    ASSERT_EQ(rv, 0);

    unsigned int final_len = 16;
    rv = CY_SymmEncryptFinal(
            hSymmKeyObj,
            ucOutData + uiOutDataLen,
            &final_len);
    ASSERT_EQ(rv, 0);

    final_len += uiOutDataLen;
    EXPECT_TRUE(std::memcmp(ucOutData, ucExpected, final_len) == 0);
    CY_DestroySymmKeyObj(hSymmKeyObj);
}

TEST(Sm4Test, Sm4EcbDecTest) {
    // ENCRYPT
    void *hSymmKeyObj = nullptr;
    unsigned char pucKey[] = {
            0x6c, 0x3e, 0xa0, 0x47, 0x76, 0x30, 0xce, 0x21, 0xa2, 0xce,
            0x33, 0x4a, 0xa7, 0x46, 0xc2, 0xcd };
    unsigned int uiKeyLen = sizeof(pucKey);
    int rv = CY_CreateSymmKeyObj(
            &hSymmKeyObj,
            pucKey, uiKeyLen,
            nullptr,
            0,
            SGD_DEC,
            SGD_SM4_ECB);
    ASSERT_EQ(rv, 0);

    unsigned char pucInData[] = {
            0xd2, 0xec, 0x2f, 0x66, 0x55, 0x6e, 0x4c, 0x30, 0xa4, 0xf6,
            0xc0, 0x12, 0x7a, 0xa7, 0x6e, 0x69, 0x13, 0xc1, 0xc1, 0x35,
            0xa3, 0x15, 0xd5, 0xcb, 0x6a, 0xd6, 0xb7, 0x1e, 0x01, 0x8d,
            0xf0, 0x8b, 0xdf, 0x27, 0x12, 0x88, 0xfd, 0xb7, 0x2a, 0xd4,
            0xe9, 0xf1, 0x55, 0x52, 0xb3, 0x19, 0xf9, 0x44 };
    unsigned int uiInDataLen = sizeof(pucInData);

    unsigned char ucOutData[32 + 16] = {0};
    unsigned int uiOutDataLen = 32 + 16;

    unsigned char ucExpected[] = {
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
            0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13,
            0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d,
            0x1e, 0x1f };

    rv = CY_SymmDecryptUpdate(
            hSymmKeyObj,
            pucInData, uiInDataLen,
            ucOutData, &uiOutDataLen);
    ASSERT_EQ(rv, 0);

    unsigned int final_len = 16;
    rv = CY_SymmDecryptFinal(
            hSymmKeyObj,
            ucOutData + uiOutDataLen,
            &final_len);
    ASSERT_EQ(rv, 0);

    final_len += uiOutDataLen;
    EXPECT_TRUE(std::memcmp(ucOutData, ucExpected, final_len) == 0);
    CY_DestroySymmKeyObj(hSymmKeyObj);
}


TEST(Sm4Test, Sm4CbcEncTest) {
    void *hSymmKeyObj = nullptr;
    unsigned char pucKey[] = {
            0x6c, 0x3e, 0xa0, 0x47, 0x76, 0x30, 0xce, 0x21, 0xa2, 0xce,
            0x33, 0x4a, 0xa7, 0x46, 0xc2, 0xcd };
    unsigned char pucIv[] = {
            0x56, 0x2e, 0x17, 0x99, 0x6d, 0x09, 0x3d, 0x28, 0xdd, 0xb3,
            0xba, 0x69, 0x5a, 0x2e, 0x6f, 0x58 };
    unsigned int uiKeyLen = sizeof(pucKey);
    unsigned int uiIvLen  = sizeof(pucIv);
    int rv = CY_CreateSymmKeyObj(
            &hSymmKeyObj,
            pucKey,
            uiKeyLen,
            pucIv,
            uiIvLen,
            SGD_ENC,
            SGD_SM4_CBC);
    ASSERT_EQ(rv, 0);
    unsigned char pucInData[] = {
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
            0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13,
            0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d,
            0x1e, 0x1f };
    unsigned int uiInDataLen = sizeof(pucInData);

    unsigned char ucOutData[32 + 16] = {0};
    unsigned int uiOutDataLen = 32 + 16;

    unsigned char ucExpected[] = {
            0xff, 0xa6, 0x9d, 0xd5, 0x9b, 0xec, 0x61, 0x5e, 0x38, 0x88,
            0xc1, 0x09, 0x75, 0x03, 0x23, 0xc2, 0xaf, 0x5f, 0x18, 0xd9,
            0xd4, 0xce, 0x5f, 0x46, 0x9e, 0x3b, 0x9c, 0xbd, 0xba, 0xb0,
            0xee, 0x8e, 0xe5, 0xf9, 0x46, 0x25, 0xd7, 0x25, 0x7e, 0x9b,
            0x32, 0x2a, 0xdd, 0x6f, 0xd2, 0xc6, 0xff, 0x66 };

    rv = CY_SymmEncryptUpdate(
            hSymmKeyObj,
            pucInData, uiInDataLen,
            ucOutData, &uiOutDataLen);
    ASSERT_EQ(rv, 0);

    unsigned int final_len = 16;
    rv = CY_SymmEncryptFinal(
            hSymmKeyObj,
            ucOutData + uiOutDataLen,
            &final_len);
    ASSERT_EQ(rv, 0);

    final_len += uiOutDataLen;
    EXPECT_TRUE(std::memcmp(ucOutData, ucExpected, final_len) == 0);
    CY_DestroySymmKeyObj(hSymmKeyObj);
}

TEST(Sm4Test, Sm4CbcDecTest) {
    void *hSymmKeyObj = nullptr;
    unsigned char pucKey[] = {
            0x6c, 0x3e, 0xa0, 0x47, 0x76, 0x30, 0xce, 0x21, 0xa2, 0xce,
            0x33, 0x4a, 0xa7, 0x46, 0xc2, 0xcd };
    unsigned char pucIv[] = {
            0x56, 0x2e, 0x17, 0x99, 0x6d, 0x09, 0x3d, 0x28, 0xdd, 0xb3,
            0xba, 0x69, 0x5a, 0x2e, 0x6f, 0x58 };
    unsigned int uiKeyLen = sizeof(pucKey);
    unsigned int uiIvLen  = sizeof(pucIv);
    int rv = CY_CreateSymmKeyObj(
            &hSymmKeyObj,
            pucKey,
            uiKeyLen,
            pucIv,
            uiIvLen,
            SGD_DEC,
            SGD_SM4_CBC);
    ASSERT_EQ(rv, 0);

    unsigned char pucInData[] = {
            0xff, 0xa6, 0x9d, 0xd5, 0x9b, 0xec, 0x61, 0x5e, 0x38, 0x88,
            0xc1, 0x09, 0x75, 0x03, 0x23, 0xc2, 0xaf, 0x5f, 0x18, 0xd9,
            0xd4, 0xce, 0x5f, 0x46, 0x9e, 0x3b, 0x9c, 0xbd, 0xba, 0xb0,
            0xee, 0x8e, 0xe5, 0xf9, 0x46, 0x25, 0xd7, 0x25, 0x7e, 0x9b,
            0x32, 0x2a, 0xdd, 0x6f, 0xd2, 0xc6, 0xff, 0x66 };
    unsigned int uiInDataLen = sizeof(pucInData);

    unsigned char ucOutData[32 + 16] = {0};
    unsigned int uiOutDataLen = 32 + 16;

    unsigned char ucExpected[] = {
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
            0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13,
            0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d,
            0x1e, 0x1f };
    rv = CY_SymmDecryptUpdate(
            hSymmKeyObj,
            pucInData, uiInDataLen,
            ucOutData, &uiOutDataLen);
    ASSERT_EQ(rv, 0);

    unsigned int final_len = 16;
    rv = CY_SymmDecryptFinal(
            hSymmKeyObj,
            ucOutData + uiOutDataLen,
            &final_len);
    ASSERT_EQ(rv, 0);

    final_len += uiOutDataLen;
    EXPECT_TRUE(std::memcmp(ucOutData, ucExpected, final_len) == 0);
    CY_DestroySymmKeyObj(hSymmKeyObj);
}

TEST(Sm4Test, Sm4CfbEncTest) {
    void *hSymmKeyObj = nullptr;
    unsigned char pucKey[] = {
            0x6c, 0x3e, 0xa0, 0x47, 0x76, 0x30, 0xce, 0x21, 0xa2, 0xce,
            0x33, 0x4a, 0xa7, 0x46, 0xc2, 0xcd };
    unsigned char pucIv[] = {
            0x56, 0x2e, 0x17, 0x99, 0x6d, 0x09, 0x3d, 0x28, 0xdd, 0xb3,
            0xba, 0x69, 0x5a, 0x2e, 0x6f, 0x58 };
    unsigned int uiKeyLen = sizeof(pucKey);
    unsigned int uiIvLen  = sizeof(pucIv);
    int rv = CY_CreateSymmKeyObj(
            &hSymmKeyObj,
            pucKey,
            uiKeyLen,
            pucIv,
            uiIvLen,
            SGD_ENC,
            SGD_SM4_CFB);
    ASSERT_EQ(rv, 0);
    unsigned char pucInData[] = {
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
            0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13,
            0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d,
            0x1e, 0x1f };
    unsigned int uiInDataLen = sizeof(pucInData);

    unsigned char ucOutData[32 + 16] = {0};
    unsigned int uiOutDataLen = 32 + 16;

    unsigned char ucExpected[] = {
            0x7c, 0x8b, 0xb9, 0xf4, 0xdd, 0x3a, 0x84, 0x1a, 0x18, 0x29,
            0x58, 0xc0, 0x6f, 0x02, 0x3d, 0xff, 0xe4, 0x5e, 0x59, 0x7a,
            0xe9, 0xa0, 0xeb, 0xc5, 0x82, 0xb0, 0x80, 0xca, 0xa4, 0xd3,
            0xaa, 0xf0 };

    rv = CY_SymmEncryptUpdate(
            hSymmKeyObj,
            pucInData, uiInDataLen,
            ucOutData, &uiOutDataLen);
    ASSERT_EQ(rv, 0);

    unsigned int final_len = 16;
    rv = CY_SymmEncryptFinal(
            hSymmKeyObj,
            ucOutData + uiOutDataLen,
            &final_len);
    ASSERT_EQ(rv, 0);

    final_len += uiOutDataLen;
    EXPECT_TRUE(std::memcmp(ucOutData, ucExpected, final_len) == 0);
    CY_DestroySymmKeyObj(hSymmKeyObj);
}

TEST(Sm4Test, Sm4CfbDecTest) {
    void *hSymmKeyObj = nullptr;
    unsigned char pucKey[] = {
            0x6c, 0x3e, 0xa0, 0x47, 0x76, 0x30, 0xce, 0x21, 0xa2, 0xce,
            0x33, 0x4a, 0xa7, 0x46, 0xc2, 0xcd };
    unsigned char pucIv[] = {
            0x56, 0x2e, 0x17, 0x99, 0x6d, 0x09, 0x3d, 0x28, 0xdd, 0xb3,
            0xba, 0x69, 0x5a, 0x2e, 0x6f, 0x58 };
    unsigned int uiKeyLen = sizeof(pucKey);
    unsigned int uiIvLen  = sizeof(pucIv);
    int rv = CY_CreateSymmKeyObj(
            &hSymmKeyObj,
            pucKey,
            uiKeyLen,
            pucIv,
            uiIvLen,
            SGD_DEC,
            SGD_SM4_CFB);
    ASSERT_EQ(rv, 0);
    unsigned char pucInData[] = {
            0x7c, 0x8b, 0xb9, 0xf4, 0xdd, 0x3a, 0x84, 0x1a, 0x18, 0x29,
            0x58, 0xc0, 0x6f, 0x02, 0x3d, 0xff, 0xe4, 0x5e, 0x59, 0x7a,
            0xe9, 0xa0, 0xeb, 0xc5, 0x82, 0xb0, 0x80, 0xca, 0xa4, 0xd3,
            0xaa, 0xf0 };
    unsigned int uiInDataLen = sizeof(pucInData);

    unsigned char ucOutData[32 + 16] = {0};
    unsigned int uiOutDataLen = 32 + 16;

    unsigned char ucExpected[] = {
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
            0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13,
            0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d,
            0x1e, 0x1f };

    rv = CY_SymmDecryptUpdate(
            hSymmKeyObj,
            pucInData, uiInDataLen,
            ucOutData, &uiOutDataLen);
    ASSERT_EQ(rv, 0);

    unsigned int final_len = 16;
    rv = CY_SymmDecryptFinal(
            hSymmKeyObj,
            ucOutData + uiOutDataLen,
            &final_len);
    ASSERT_EQ(rv, 0);

    final_len += uiOutDataLen;
    EXPECT_TRUE(std::memcmp(ucOutData, ucExpected, final_len) == 0);
    CY_DestroySymmKeyObj(hSymmKeyObj);
}

TEST(Sm4Test, Sm4OfbEncTest) {
    void *hSymmKeyObj = nullptr;
    unsigned char pucKey[] = {
            0x6c, 0x3e, 0xa0, 0x47, 0x76, 0x30, 0xce, 0x21, 0xa2, 0xce,
            0x33, 0x4a, 0xa7, 0x46, 0xc2, 0xcd };
    unsigned char pucIv[] = {
            0x56, 0x2e, 0x17, 0x99, 0x6d, 0x09, 0x3d, 0x28, 0xdd, 0xb3,
            0xba, 0x69, 0x5a, 0x2e, 0x6f, 0x58 };
    unsigned int uiKeyLen = sizeof(pucKey);
    unsigned int uiIvLen  = sizeof(pucIv);
    int rv = CY_CreateSymmKeyObj(
            &hSymmKeyObj,
            pucKey,
            uiKeyLen,
            pucIv,
            uiIvLen,
            SGD_ENC,
            SGD_SM4_OFB);
    ASSERT_EQ(rv, 0);
    unsigned char pucInData[] = {
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
            0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13,
            0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d,
            0x1e, 0x1f };
    unsigned int uiInDataLen = sizeof(pucInData);

    unsigned char ucOutData[32 + 16] = {0};
    unsigned int uiOutDataLen = 32 + 16;

    unsigned char ucExpected[] = {
            0x7c, 0x8b, 0xb9, 0xf4, 0xdd, 0x3a, 0x84, 0x1a, 0x18, 0x29,
            0x58, 0xc0, 0x6f, 0x02, 0x3d, 0xff, 0x6e, 0x69, 0x1f, 0x64,
            0x3b, 0xdd, 0x8e, 0x92, 0x44, 0x78, 0x97, 0x8d, 0x94, 0x8f,
            0x91, 0x17 };

    rv = CY_SymmEncryptUpdate(
            hSymmKeyObj,
            pucInData,
            uiInDataLen,
            ucOutData,
            &uiOutDataLen);
    ASSERT_EQ(rv, 0);

    unsigned int final_len = 16;
    rv = CY_SymmEncryptFinal(
            hSymmKeyObj,
            ucOutData + uiOutDataLen,
            &final_len);
    ASSERT_EQ(rv, 0);

    final_len += uiOutDataLen;
    EXPECT_TRUE(std::memcmp(ucOutData, ucExpected, final_len) == 0);
    CY_DestroySymmKeyObj(hSymmKeyObj);
}

TEST(Sm4Test, Sm4OfbDecTest) {
    void *hSymmKeyObj = nullptr;
    unsigned char pucKey[] = {
            0x6c, 0x3e, 0xa0, 0x47, 0x76, 0x30, 0xce, 0x21, 0xa2, 0xce,
            0x33, 0x4a, 0xa7, 0x46, 0xc2, 0xcd };
    unsigned char pucIv[] = {
            0x56, 0x2e, 0x17, 0x99, 0x6d, 0x09, 0x3d, 0x28, 0xdd, 0xb3,
            0xba, 0x69, 0x5a, 0x2e, 0x6f, 0x58 };
    unsigned int uiKeyLen = sizeof(pucKey);
    unsigned int uiIvLen  = sizeof(pucIv);
    int rv = CY_CreateSymmKeyObj(
            &hSymmKeyObj,
            pucKey,
            uiKeyLen,
            pucIv,
            uiIvLen,
            SGD_DEC,
            SGD_SM4_OFB);
    ASSERT_EQ(rv, 0);
    unsigned char pucInData[] = {
            0x7c, 0x8b, 0xb9, 0xf4, 0xdd, 0x3a, 0x84, 0x1a, 0x18, 0x29,
            0x58, 0xc0, 0x6f, 0x02, 0x3d, 0xff, 0x6e, 0x69, 0x1f, 0x64,
            0x3b, 0xdd, 0x8e, 0x92, 0x44, 0x78, 0x97, 0x8d, 0x94, 0x8f,
            0x91, 0x17 };
    unsigned int uiInDataLen = sizeof(pucInData);

    unsigned char ucOutData[32 + 16] = {0};
    unsigned int uiOutDataLen = 32 + 16;

    unsigned char ucExpected[] = {
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
            0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13,
            0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d,
            0x1e, 0x1f };

    rv = CY_SymmDecryptUpdate(
            hSymmKeyObj,
            pucInData, uiInDataLen,
            ucOutData, &uiOutDataLen);
    ASSERT_EQ(rv, 0);

    unsigned int final_len = 16;
    rv = CY_SymmDecryptFinal(
            hSymmKeyObj,
            ucOutData + uiOutDataLen,
            &final_len);
    ASSERT_EQ(rv, 0);

    final_len += uiOutDataLen;
    EXPECT_TRUE(std::memcmp(ucOutData, ucExpected, final_len) == 0);
    CY_DestroySymmKeyObj(hSymmKeyObj);
}