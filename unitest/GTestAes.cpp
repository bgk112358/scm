// 
// Create by kong
// Copyright 2025 China Automotive Research Software Evaluation Co., Ltd.
//
#include "gtest/gtest.h"

#include <cstring>
extern "C" {
#include "cyber_pki.h"
}

/*
 * Test vector
 * https://www.ietf.org/rfc/rfc3602.txt
 * https://www.ietf.org/rfc/rfc3686.txt
 */

TEST(AesTest, AesEcbEncTest) {
    // ENCRYPT
    void *hSymmKeyObj = nullptr;
    unsigned char pucKey[] = {
            0x6c, 0x3e, 0xa0, 0x47, 0x76, 0x30, 0xce, 0x21, 0xa2, 0xce,
            0x33, 0x4a, 0xa7, 0x46, 0xc2, 0xcd };
    unsigned int uiKeyLen = sizeof(pucKey);
    int rv = CY_CreateSymmKeyObj(
            &hSymmKeyObj,
            pucKey, uiKeyLen,
            nullptr, 0, 1, SGD_AES_ECB);
    ASSERT_EQ(rv, 0);
    unsigned char pucInData[] = {
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
            0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13,
            0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d,
            0x1e, 0x1f };
    unsigned int uiInDataLen = sizeof(pucInData);

    unsigned char ucOutData[32 + 16] = {0};
    unsigned int uiOutDataLen = 32 + 16;

    unsigned char ucExpected[] = {
            0x1d, 0x3d, 0xee, 0x35, 0xa0, 0xce, 0xde, 0x17, 0x61, 0x0f,
            0x29, 0xe5, 0x98, 0xb6, 0xbf, 0x55, 0x8f, 0x6c, 0xa9, 0x0e,
            0xc1, 0x73, 0xc5, 0xc6, 0x75, 0x0f, 0x8c, 0xc4, 0x08, 0x6c,
            0xe3, 0x03, 0x96, 0x9a, 0x49, 0x89, 0xe2, 0xcf, 0xd7, 0xa9,
            0x7a, 0x1a, 0x12, 0xa6, 0x79, 0x23, 0xd5, 0x9d };

    rv = CY_SymmEncryptUpdate(
            hSymmKeyObj,
            pucInData, uiInDataLen,
            ucOutData, &uiOutDataLen);
    ASSERT_EQ(rv, 0);

    unsigned int final_len = 16;
    rv = CY_SymmEncryptFinal(
            hSymmKeyObj,
            ucOutData + uiOutDataLen,
            &final_len);
    ASSERT_EQ(rv, 0);

    final_len += uiOutDataLen;
    EXPECT_TRUE(std::memcmp(ucOutData, ucExpected, final_len) == 0);

    CY_DestroySymmKeyObj(hSymmKeyObj);
}

TEST(AesTest, AesEcbEncTest_ex) {
    // ENCRYPT
    void *hSymmKeyObj = nullptr;
    unsigned char pucKey[] = {
            0x6c, 0x3e, 0xa0, 0x47, 0x76, 0x30, 0xce, 0x21, 0xa2, 0xce,
            0x33, 0x4a, 0xa7, 0x46, 0xc2, 0xcd };
    unsigned int uiKeyLen = sizeof(pucKey);
    int rv = CY_CreateSymmKeyObj(
            &hSymmKeyObj,
            pucKey, uiKeyLen,
            nullptr, 0, 1, SGD_AES_ECB);
    ASSERT_EQ(rv, 0);
    unsigned char pucInData[] = {
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
            0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13,
            0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d,
            0x1e, 0x1f };
    unsigned int uiInDataLen = sizeof(pucInData);

    unsigned char ucOutData[32 + 16] = {0};
    unsigned int uiOutDataLen = 32 + 16;

    unsigned char ucExpected[] = {
            0x1d, 0x3d, 0xee, 0x35, 0xa0, 0xce, 0xde, 0x17, 0x61, 0x0f,
            0x29, 0xe5, 0x98, 0xb6, 0xbf, 0x55, 0x8f, 0x6c, 0xa9, 0x0e,
            0xc1, 0x73, 0xc5, 0xc6, 0x75, 0x0f, 0x8c, 0xc4, 0x08, 0x6c,
            0xe3, 0x03, 0x96, 0x9a, 0x49, 0x89, 0xe2, 0xcf, 0xd7, 0xa9,
            0x7a, 0x1a, 0x12, 0xa6, 0x79, 0x23, 0xd5, 0x9d };

    rv = CY_SymmEncrypt(hSymmKeyObj, pucInData, uiInDataLen, ucOutData, &uiOutDataLen);
    ASSERT_EQ(rv, 0);
    EXPECT_TRUE(std::memcmp(ucOutData, ucExpected, uiOutDataLen) == 0);
    CY_DestroySymmKeyObj(hSymmKeyObj);
}


TEST(AesTest, AesEcbDecTest) {
    // ENCRYPT
    void *hSymmKeyObj = nullptr;
    unsigned char pucKey[] = {
            0x6c, 0x3e, 0xa0, 0x47, 0x76, 0x30, 0xce, 0x21, 0xa2, 0xce,
            0x33, 0x4a, 0xa7, 0x46, 0xc2, 0xcd };
    unsigned int uiKeyLen = sizeof(pucKey);
    int rv = CY_CreateSymmKeyObj(
            &hSymmKeyObj,
            pucKey, uiKeyLen,
            nullptr, 0, 0, SGD_AES_ECB);
    ASSERT_EQ(rv, 0);

    unsigned char pucInData[] = {
            0x1d, 0x3d, 0xee, 0x35, 0xa0, 0xce, 0xde, 0x17, 0x61, 0x0f,
            0x29, 0xe5, 0x98, 0xb6, 0xbf, 0x55, 0x8f, 0x6c, 0xa9, 0x0e,
            0xc1, 0x73, 0xc5, 0xc6, 0x75, 0x0f, 0x8c, 0xc4, 0x08, 0x6c,
            0xe3, 0x03, 0x96, 0x9a, 0x49, 0x89, 0xe2, 0xcf, 0xd7, 0xa9,
            0x7a, 0x1a, 0x12, 0xa6, 0x79, 0x23, 0xd5, 0x9d };
    unsigned int uiInDataLen = sizeof(pucInData);

    unsigned char ucOutData[32 + 16] = {0};
    unsigned int uiOutDataLen = 32 + 16;

    unsigned char ucExpected[] = {
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
            0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13,
            0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d,
            0x1e, 0x1f };

    rv = CY_SymmDecryptUpdate(
            hSymmKeyObj,
            pucInData, uiInDataLen,
            ucOutData, &uiOutDataLen);
    ASSERT_EQ(rv, 0);

    unsigned int final_len = 16;
    rv = CY_SymmDecryptFinal(
            hSymmKeyObj,
            ucOutData + uiOutDataLen,
            &final_len);
    ASSERT_EQ(rv, 0);

    final_len += uiOutDataLen;
    EXPECT_TRUE(std::memcmp(ucOutData, ucExpected, final_len) == 0);
    CY_DestroySymmKeyObj(hSymmKeyObj);
}

TEST(AesTest, AesEcbDecTest_ex) {
    // ENCRYPT
    void *hSymmKeyObj = nullptr;
    unsigned char pucKey[] = {
            0x6c, 0x3e, 0xa0, 0x47, 0x76, 0x30, 0xce, 0x21, 0xa2, 0xce,
            0x33, 0x4a, 0xa7, 0x46, 0xc2, 0xcd };
    unsigned int uiKeyLen = sizeof(pucKey);
    int rv = CY_CreateSymmKeyObj(
            &hSymmKeyObj,
            pucKey, uiKeyLen,
            nullptr, 0, 0, SGD_AES_ECB);
    ASSERT_EQ(rv, 0);

    unsigned char pucInData[] = {
            0x1d, 0x3d, 0xee, 0x35, 0xa0, 0xce, 0xde, 0x17, 0x61, 0x0f,
            0x29, 0xe5, 0x98, 0xb6, 0xbf, 0x55, 0x8f, 0x6c, 0xa9, 0x0e,
            0xc1, 0x73, 0xc5, 0xc6, 0x75, 0x0f, 0x8c, 0xc4, 0x08, 0x6c,
            0xe3, 0x03, 0x96, 0x9a, 0x49, 0x89, 0xe2, 0xcf, 0xd7, 0xa9,
            0x7a, 0x1a, 0x12, 0xa6, 0x79, 0x23, 0xd5, 0x9d };
    unsigned int uiInDataLen = sizeof(pucInData);

    unsigned char ucOutData[32 + 16] = {0};
    unsigned int uiOutDataLen = 32 + 16;

    unsigned char ucExpected[] = {
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
            0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13,
            0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d,
            0x1e, 0x1f };
    rv = CY_SymmDecrypt(hSymmKeyObj, pucInData, uiInDataLen, ucOutData, &uiOutDataLen);
    ASSERT_EQ(rv, 0);
    EXPECT_TRUE(std::memcmp(ucOutData, ucExpected, uiOutDataLen) == 0);
    CY_DestroySymmKeyObj(hSymmKeyObj);
}


TEST(AesTest, AesCbcEncTest) {
    void *hSymmKeyObj = nullptr;
    unsigned char pucKey[] = {
            0x6c, 0x3e, 0xa0, 0x47, 0x76, 0x30, 0xce, 0x21, 0xa2, 0xce,
            0x33, 0x4a, 0xa7, 0x46, 0xc2, 0xcd };
    unsigned char pucIv[] = {
            0x56, 0x2e, 0x17, 0x99, 0x6d, 0x09, 0x3d, 0x28, 0xdd, 0xb3,
            0xba, 0x69, 0x5a, 0x2e, 0x6f, 0x58 };
    unsigned int uiKeyLen = sizeof(pucKey);
    unsigned int uiIvLen  = sizeof(pucIv);
    int rv = CY_CreateSymmKeyObj(
            &hSymmKeyObj,
            pucKey, uiKeyLen,
            pucIv, uiIvLen, 1, SGD_AES_CBC);
    ASSERT_EQ(rv, 0);
    unsigned char pucInData[] = {
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
            0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13,
            0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d,
            0x1e, 0x1f };
    unsigned int uiInDataLen = sizeof(pucInData);

    unsigned char ucOutData[32 + 16] = {0};
    unsigned int uiOutDataLen = 32 + 16;

    unsigned char ucExpected[] = {
            0x3e, 0x41, 0x4e, 0xe1, 0xb8, 0x74, 0xe2, 0xca, 0x34, 0x73,
            0x1f, 0xc5, 0x13, 0x43, 0x22, 0xaa, 0x14, 0x51, 0x6a, 0x8e,
            0xd5, 0x3f, 0xbb, 0xb9, 0x97, 0xc7, 0x28, 0x89, 0xea, 0x6c,
            0x12, 0xad, 0x94, 0xb7, 0xe2, 0x0d, 0xff, 0x76, 0xd3, 0x01,
            0x71, 0x1f, 0xa7, 0x59, 0x78, 0x4f, 0x93, 0x6c };

    rv = CY_SymmEncryptUpdate(
            hSymmKeyObj,
            pucInData, uiInDataLen,
            ucOutData, &uiOutDataLen);
    ASSERT_EQ(rv, 0);

    unsigned int final_len = 16;
    rv = CY_SymmEncryptFinal(
            hSymmKeyObj,
            ucOutData + uiOutDataLen,
            &final_len);
    ASSERT_EQ(rv, 0);

    final_len += uiOutDataLen;
    EXPECT_TRUE(std::memcmp(ucOutData, ucExpected, final_len) == 0);
    CY_DestroySymmKeyObj(hSymmKeyObj);
}

TEST(AesTest, AesCbcEncTest_ex) {
    void *hSymmKeyObj = nullptr;
    unsigned char pucKey[] = {
            0x6c, 0x3e, 0xa0, 0x47, 0x76, 0x30, 0xce, 0x21, 0xa2, 0xce,
            0x33, 0x4a, 0xa7, 0x46, 0xc2, 0xcd };
    unsigned char pucIv[] = {
            0x56, 0x2e, 0x17, 0x99, 0x6d, 0x09, 0x3d, 0x28, 0xdd, 0xb3,
            0xba, 0x69, 0x5a, 0x2e, 0x6f, 0x58 };
    unsigned int uiKeyLen = sizeof(pucKey);
    unsigned int uiIvLen  = sizeof(pucIv);
    int rv = CY_CreateSymmKeyObj(
            &hSymmKeyObj,
            pucKey, uiKeyLen,
            pucIv, uiIvLen, 1, SGD_AES_CBC);
    ASSERT_EQ(rv, 0);
    unsigned char pucInData[] = {
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
            0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13,
            0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d,
            0x1e, 0x1f };
    unsigned int uiInDataLen = sizeof(pucInData);

    unsigned char ucOutData[32 + 16] = {0};
    unsigned int uiOutDataLen = 32 + 16;

    unsigned char ucExpected[] = {
            0x3e, 0x41, 0x4e, 0xe1, 0xb8, 0x74, 0xe2, 0xca, 0x34, 0x73,
            0x1f, 0xc5, 0x13, 0x43, 0x22, 0xaa, 0x14, 0x51, 0x6a, 0x8e,
            0xd5, 0x3f, 0xbb, 0xb9, 0x97, 0xc7, 0x28, 0x89, 0xea, 0x6c,
            0x12, 0xad, 0x94, 0xb7, 0xe2, 0x0d, 0xff, 0x76, 0xd3, 0x01,
            0x71, 0x1f, 0xa7, 0x59, 0x78, 0x4f, 0x93, 0x6c };

    rv = CY_SymmEncrypt(hSymmKeyObj, pucInData, uiInDataLen, ucOutData, &uiOutDataLen);
    ASSERT_EQ(rv, 0);
    EXPECT_TRUE(std::memcmp(ucOutData, ucExpected, uiOutDataLen) == 0);
    CY_DestroySymmKeyObj(hSymmKeyObj);
}

TEST(AesTest, AesCbcDecTest) {
    void *hSymmKeyObj = nullptr;
    unsigned char pucKey[] = {
            0x6c, 0x3e, 0xa0, 0x47, 0x76, 0x30, 0xce, 0x21, 0xa2, 0xce,
            0x33, 0x4a, 0xa7, 0x46, 0xc2, 0xcd };
    unsigned char pucIv[] = {
            0x56, 0x2e, 0x17, 0x99, 0x6d, 0x09, 0x3d, 0x28, 0xdd, 0xb3,
            0xba, 0x69, 0x5a, 0x2e, 0x6f, 0x58 };
    unsigned int uiKeyLen = sizeof(pucKey);
    unsigned int uiIvLen  = sizeof(pucIv);
    int rv = CY_CreateSymmKeyObj(
            &hSymmKeyObj,
            pucKey, uiKeyLen,
            pucIv, uiIvLen, 0, SGD_AES_CBC);
    ASSERT_EQ(rv, 0);

    unsigned char pucInData[] = {
            0x3e, 0x41, 0x4e, 0xe1, 0xb8, 0x74, 0xe2, 0xca, 0x34, 0x73,
            0x1f, 0xc5, 0x13, 0x43, 0x22, 0xaa, 0x14, 0x51, 0x6a, 0x8e,
            0xd5, 0x3f, 0xbb, 0xb9, 0x97, 0xc7, 0x28, 0x89, 0xea, 0x6c,
            0x12, 0xad, 0x94, 0xb7, 0xe2, 0x0d, 0xff, 0x76, 0xd3, 0x01,
            0x71, 0x1f, 0xa7, 0x59, 0x78, 0x4f, 0x93, 0x6c };
    unsigned int uiInDataLen = sizeof(pucInData);

    unsigned char ucOutData[32 + 16] = {0};
    unsigned int uiOutDataLen = 32 + 16;

    unsigned char ucExpected[] = {
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
            0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13,
            0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d,
            0x1e, 0x1f };
    rv = CY_SymmDecryptUpdate(
            hSymmKeyObj,
            pucInData, uiInDataLen,
            ucOutData, &uiOutDataLen);
    ASSERT_EQ(rv, 0);

    unsigned int final_len = 16;
    rv = CY_SymmDecryptFinal(
            hSymmKeyObj,
            ucOutData + uiOutDataLen,
            &final_len);
    ASSERT_EQ(rv, 0);

    final_len += uiOutDataLen;
    EXPECT_TRUE(std::memcmp(ucOutData, ucExpected, final_len) == 0);
    CY_DestroySymmKeyObj(hSymmKeyObj);
}

TEST(AesTest, AesCbcDecTest_ex) {
    void *hSymmKeyObj = nullptr;
    unsigned char pucKey[] = {
            0x6c, 0x3e, 0xa0, 0x47, 0x76, 0x30, 0xce, 0x21, 0xa2, 0xce,
            0x33, 0x4a, 0xa7, 0x46, 0xc2, 0xcd };
    unsigned char pucIv[] = {
            0x56, 0x2e, 0x17, 0x99, 0x6d, 0x09, 0x3d, 0x28, 0xdd, 0xb3,
            0xba, 0x69, 0x5a, 0x2e, 0x6f, 0x58 };
    unsigned int uiKeyLen = sizeof(pucKey);
    unsigned int uiIvLen  = sizeof(pucIv);
    int rv = CY_CreateSymmKeyObj(
            &hSymmKeyObj,
            pucKey, uiKeyLen,
            pucIv, uiIvLen, 0, SGD_AES_CBC);
    ASSERT_EQ(rv, 0);

    unsigned char pucInData[] = {
            0x3e, 0x41, 0x4e, 0xe1, 0xb8, 0x74, 0xe2, 0xca, 0x34, 0x73,
            0x1f, 0xc5, 0x13, 0x43, 0x22, 0xaa, 0x14, 0x51, 0x6a, 0x8e,
            0xd5, 0x3f, 0xbb, 0xb9, 0x97, 0xc7, 0x28, 0x89, 0xea, 0x6c,
            0x12, 0xad, 0x94, 0xb7, 0xe2, 0x0d, 0xff, 0x76, 0xd3, 0x01,
            0x71, 0x1f, 0xa7, 0x59, 0x78, 0x4f, 0x93, 0x6c };
    unsigned int uiInDataLen = sizeof(pucInData);

    unsigned char ucOutData[32 + 16] = {0};
    unsigned int uiOutDataLen = 32 + 16;

    unsigned char ucExpected[] = {
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
            0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13,
            0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d,
            0x1e, 0x1f };
    rv = CY_SymmDecrypt(hSymmKeyObj, pucInData, uiInDataLen, ucOutData, &uiOutDataLen);
    ASSERT_EQ(rv, 0);
    EXPECT_TRUE(std::memcmp(ucOutData, ucExpected, uiOutDataLen) == 0);
    CY_DestroySymmKeyObj(hSymmKeyObj);
}

TEST(AesTest, AesCfbEncTest) {
    void *hSymmKeyObj = nullptr;
    unsigned char pucKey[] = {
            0x6c, 0x3e, 0xa0, 0x47, 0x76, 0x30, 0xce, 0x21, 0xa2, 0xce,
            0x33, 0x4a, 0xa7, 0x46, 0xc2, 0xcd };
    unsigned char pucIv[] = {
            0x56, 0x2e, 0x17, 0x99, 0x6d, 0x09, 0x3d, 0x28, 0xdd, 0xb3,
            0xba, 0x69, 0x5a, 0x2e, 0x6f, 0x58 };
    unsigned int uiKeyLen = sizeof(pucKey);
    unsigned int uiIvLen  = sizeof(pucIv);
    int rv = CY_CreateSymmKeyObj(
            &hSymmKeyObj,
            pucKey, uiKeyLen,
            pucIv, uiIvLen, 1, SGD_AES_CFB);
    ASSERT_EQ(rv, 0);
    unsigned char pucInData[] = {
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
            0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13,
            0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d,
            0x1e, 0x1f };
    unsigned int uiInDataLen = sizeof(pucInData);

    unsigned char ucOutData[32 + 16] = {0};
    unsigned int uiOutDataLen = 32 + 16;

    unsigned char ucExpected[] = {
            0x71, 0x92, 0x18, 0x0c, 0x33, 0x15, 0xea, 0x7f, 0xcd, 0x5a,
            0xd5, 0x1d, 0x00, 0xec, 0x10, 0x8c, 0x96, 0x7b, 0xea, 0x58,
            0xd0, 0x5b, 0x9c, 0x4d, 0xca, 0x7b, 0x22, 0x45, 0xc7, 0xa4,
            0x50, 0xbb };

    rv = CY_SymmEncryptUpdate(
            hSymmKeyObj,
            pucInData, uiInDataLen,
            ucOutData, &uiOutDataLen);
    ASSERT_EQ(rv, 0);

    unsigned int final_len = 16;
    rv = CY_SymmEncryptFinal(
            hSymmKeyObj,
            ucOutData + uiOutDataLen,
            &final_len);
    ASSERT_EQ(rv, 0);

    final_len += uiOutDataLen;
    EXPECT_TRUE(std::memcmp(ucOutData, ucExpected, final_len) == 0);
    CY_DestroySymmKeyObj(hSymmKeyObj);
}

TEST(AesTest, AesCfbDecTest) {
    void *hSymmKeyObj = nullptr;
    unsigned char pucKey[] = {
            0x6c, 0x3e, 0xa0, 0x47, 0x76, 0x30, 0xce, 0x21, 0xa2, 0xce,
            0x33, 0x4a, 0xa7, 0x46, 0xc2, 0xcd };
    unsigned char pucIv[] = {
            0x56, 0x2e, 0x17, 0x99, 0x6d, 0x09, 0x3d, 0x28, 0xdd, 0xb3,
            0xba, 0x69, 0x5a, 0x2e, 0x6f, 0x58 };
    unsigned int uiKeyLen = sizeof(pucKey);
    unsigned int uiIvLen  = sizeof(pucIv);
    int rv = CY_CreateSymmKeyObj(
            &hSymmKeyObj,
            pucKey, uiKeyLen,
            pucIv, uiIvLen, 0, SGD_AES_CFB);
    ASSERT_EQ(rv, 0);
    unsigned char pucInData[] = {
            0x71, 0x92, 0x18, 0x0c, 0x33, 0x15, 0xea, 0x7f, 0xcd, 0x5a,
            0xd5, 0x1d, 0x00, 0xec, 0x10, 0x8c, 0x96, 0x7b, 0xea, 0x58,
            0xd0, 0x5b, 0x9c, 0x4d, 0xca, 0x7b, 0x22, 0x45, 0xc7, 0xa4,
            0x50, 0xbb };
    unsigned int uiInDataLen = sizeof(pucInData);

    unsigned char ucOutData[32 + 16] = {0};
    unsigned int uiOutDataLen = 32 + 16;

    unsigned char ucExpected[] = {
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
            0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13,
            0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d,
            0x1e, 0x1f };

    rv = CY_SymmDecryptUpdate(
            hSymmKeyObj,
            pucInData, uiInDataLen,
            ucOutData, &uiOutDataLen);
    ASSERT_EQ(rv, 0);

    unsigned int final_len = 16;
    rv = CY_SymmDecryptFinal(
            hSymmKeyObj,
            ucOutData + uiOutDataLen,
            &final_len);
    ASSERT_EQ(rv, 0);

    final_len += uiOutDataLen;
    EXPECT_TRUE(std::memcmp(ucOutData, ucExpected, final_len) == 0);
    CY_DestroySymmKeyObj(hSymmKeyObj);
}

TEST(AesTest, AesOfbEncTest) {
    void *hSymmKeyObj = nullptr;
    unsigned char pucKey[] = {
            0x6c, 0x3e, 0xa0, 0x47, 0x76, 0x30, 0xce, 0x21, 0xa2, 0xce,
            0x33, 0x4a, 0xa7, 0x46, 0xc2, 0xcd };
    unsigned char pucIv[] = {
            0x56, 0x2e, 0x17, 0x99, 0x6d, 0x09, 0x3d, 0x28, 0xdd, 0xb3,
            0xba, 0x69, 0x5a, 0x2e, 0x6f, 0x58 };
    unsigned int uiKeyLen = sizeof(pucKey);
    unsigned int uiIvLen  = sizeof(pucIv);
    int rv = CY_CreateSymmKeyObj(
            &hSymmKeyObj,
            pucKey, uiKeyLen,
            pucIv, uiIvLen, 1, SGD_AES_OFB);
    ASSERT_EQ(rv, 0);
    unsigned char pucInData[] = {
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
            0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13,
            0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d,
            0x1e, 0x1f };
    unsigned int uiInDataLen = sizeof(pucInData);

    unsigned char ucOutData[32 + 16] = {0};
    unsigned int uiOutDataLen = 32 + 16;

    unsigned char ucExpected[] = {
            0x71, 0x92, 0x18, 0x0c, 0x33, 0x15, 0xea, 0x7f, 0xcd, 0x5a,
            0xd5, 0x1d, 0x00, 0xec, 0x10, 0x8c, 0x5a, 0xf6, 0x37, 0xf2,
            0xe5, 0xa8, 0x5d, 0x00, 0x6d, 0xac, 0x01, 0xaf, 0xdc, 0x63,
            0x9e, 0x29 };

    rv = CY_SymmEncryptUpdate(
            hSymmKeyObj,
            pucInData, uiInDataLen,
            ucOutData, &uiOutDataLen);
    ASSERT_EQ(rv, 0);

    unsigned int final_len = 16;
    rv = CY_SymmEncryptFinal(
            hSymmKeyObj,
            ucOutData + uiOutDataLen,
            &final_len);
    ASSERT_EQ(rv, 0);

    final_len += uiOutDataLen;
    EXPECT_TRUE(std::memcmp(ucOutData, ucExpected, final_len) == 0);
    CY_DestroySymmKeyObj(hSymmKeyObj);
}

TEST(AesTest, AesOfbDecTest) {
    void *hSymmKeyObj = nullptr;
    unsigned char pucKey[] = {
            0x6c, 0x3e, 0xa0, 0x47, 0x76, 0x30, 0xce, 0x21, 0xa2, 0xce,
            0x33, 0x4a, 0xa7, 0x46, 0xc2, 0xcd };
    unsigned char pucIv[] = {
            0x56, 0x2e, 0x17, 0x99, 0x6d, 0x09, 0x3d, 0x28, 0xdd, 0xb3,
            0xba, 0x69, 0x5a, 0x2e, 0x6f, 0x58 };
    unsigned int uiKeyLen = sizeof(pucKey);
    unsigned int uiIvLen  = sizeof(pucIv);
    int rv = CY_CreateSymmKeyObj(
            &hSymmKeyObj,
            pucKey, uiKeyLen,
            pucIv, uiIvLen, 0, SGD_AES_OFB);
    ASSERT_EQ(rv, 0);
    unsigned char pucInData[] = {
            0x71, 0x92, 0x18, 0x0c, 0x33, 0x15, 0xea, 0x7f, 0xcd, 0x5a,
            0xd5, 0x1d, 0x00, 0xec, 0x10, 0x8c, 0x5a, 0xf6, 0x37, 0xf2,
            0xe5, 0xa8, 0x5d, 0x00, 0x6d, 0xac, 0x01, 0xaf, 0xdc, 0x63,
            0x9e, 0x29 };
    unsigned int uiInDataLen = sizeof(pucInData);

    unsigned char ucOutData[32 + 16] = {0};
    unsigned int uiOutDataLen = 32 + 16;

    unsigned char ucExpected[] = {
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
            0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13,
            0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d,
            0x1e, 0x1f };

    rv = CY_SymmDecryptUpdate(
            hSymmKeyObj,
            pucInData, uiInDataLen,
            ucOutData, &uiOutDataLen);
    ASSERT_EQ(rv, 0);

    unsigned int final_len = 16;
    rv = CY_SymmDecryptFinal(
            hSymmKeyObj,
            ucOutData + uiOutDataLen,
            &final_len);
    ASSERT_EQ(rv, 0);

    final_len += uiOutDataLen;
    EXPECT_TRUE(std::memcmp(ucOutData, ucExpected, final_len) == 0);
    CY_DestroySymmKeyObj(hSymmKeyObj);
}